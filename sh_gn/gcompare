#!/bin/bash

######## Script Information. BGN ########
# Author: liubingzhao.
# Date: 2017-06-01
######## Script Information. END ########

function print_help() {
    cat << Help
说明：定制化的 比较 命令，引导式选择不同项目文件进行比较。
用法：meld <TARGET_FILE>
Help
}

function init_global_vars() {
    FILE_PATH_1=
    FILE_PATH_2=
    COMPARE_CMD=`which bcompare`
    PROJECTS_ROOT=~/Projects
    LIST_FILE=
}

# Parse and validate the arguments.
# return 0: ok
# return 1: invalid or print help.
function parse_and_check_args () {
    while [ $# -gt 0 ];do
        case "$1" in
        -h|--help|\?)
            print_help ${command_name}
            return 1    # exit.
            ;;
        -l|--list)
            shift
            LIST_FILE="$1"
            shift
            ;;
        *)
            shift
            ;;
        esac
    done
}

function do_compare() {
    if [ $# -eq 1 -a -e "$1" ]; then
        FILE_PATH_1="$1"
        if [[ ${FILE_PATH_1} == \./* ]]; then
            FILE_PATH_1=${FILE_PATH_1#*./}
            echo "FILE_PATH_1=${FILE_PATH_1}"
        fi
        selections=
        # 只显示目录
        for item in `ls -F ${PROJECTS_ROOT}`; do
            if [[ ${item} == */ ]]; then
                selections="${selections} ${item%/*}"
            fi
        done
        echo "比较哪个项目："
        selection=
        if [ -n "${GCOMPARE_TARGET_PROJECT}" ]; then
            selection="${GCOMPARE_TARGET_PROJECT}"
        fi
        while [ -z "${selection}" ]; do
            select selection in ${selections}; do
                :
                break
            done
        done
        # 默认 android 库
        local target=${PROJECTS_ROOT}/${selection}/L*/a*/gionee
        # 判断是否为 package 库
        mypwd=$(pwd)
        if [[ ${mypwd} == */packages* ]]; then
            target=${PROJECTS_ROOT}/${selection}/L*/p*/gionee
        fi
        echo target=${target}
        local results=$(find ${target} -name "$(basename ${FILE_PATH_1})" | grep "${FILE_PATH_1}")
        local count=0
        if [ -n "${results}" ]; then
            count=$(printf "${results}\n" | wc -l)
        fi
        #echo "count=${count}"
        if [ ${count} -gt 1 ]; then   # If there're two or more records.
            # 将长的绝对路径截取简化
            local selections=
            while read line; do
                printf "%s\n" ${line}
                line=${line#*/gionee/}
                if [ -z "${selections}" ]; then
                    selections="${line}"
                else
                    selections=$(printf "${selections}\n${line}")
                fi
            done < <(printf "${results}\n")
            echo "在 ${selection} 的 gionee 库下有多个查询结果，请选择："
            selection=
            while [ -z "${selection}" ]; do
                #select selection in $(printf "${results}\n" | sed "s:^.*/gionee/:: "); do
                select selection in ${selections}; do
                    FILE_PATH_2="${target}/${selection}"
                    break
                done
            done
        elif [ ${count} -eq 1 ]; then  # If there's only one record.
            FILE_PATH_2=${results}
        elif [ ${count} -eq 0 ]; then   # If there's no record.
            echo "gionee 库没有此文件"
            read -p "Copy to gionee?(y/N)" ANSWER
            if [[ ${ANSWER} != y && ${ANSWER} != Y ]]; then
                exit 0
            fi
            selections=
            while read line; do
                line=${line#*/gionee/}
                line=${line%/system/core*}
                if [ -z "${selections}" ]; then
                    selections="${line}"
                else
                    selections=$(printf "${selections}\n${line}")
                fi
            done < <(find ${target} -name "core" | grep "system/core")
            selection=
            while [ -z "${selection}" ]; do
                select selection in ${selections}; do
                    FILE_PATH_2="${target}/${selection}"
                    break
                done
            done
            printf "FILE_PATH_1=%s\nFILE_PATH_2=%s\n" ${FILE_PATH_1} ${FILE_PATH_2}
            if [ -d "${FILE_PATH_1}" ]; then
                echo cp -r --parents "${FILE_PATH_1}" "${FILE_PATH_2}"
                cp -r -v --parents "${FILE_PATH_1}" ${FILE_PATH_2}
            elif [ -f "${FILE_PATH_1}" ]; then
                cp -v --parents "${FILE_PATH_1}" ${FILE_PATH_2}
            fi
            return 1
        fi
        ${COMPARE_CMD} "${FILE_PATH_1}" ${FILE_PATH_2}
    elif [ ! -f "${FILE_PATH_1}" -o ! -d "${FILE_PATH_1}" ]; then
        printf "No such file or directory.\n"
    else
        printf "Nothing to do.\n"
    fi
}

function main() {
    init_global_vars
    parse_and_check_args "$@"
    if [ $? -ne 0 ]; then return; fi
    if [ -n "${LIST_FILE}" -a -f "${LIST_FILE}" ]; then
        while read line; do
            do_compare "${line}"
        done < "${LIST_FILE}"
    else
        do_compare "$@"
    fi
}

main "$@"
