#!/bin/bash

######## Script Information. BGN ########
# Author: liubingzhao.
# Date: 2017-01-19
######## Script Information. END ########

#if mount error below:
#  "mount: wrong fs type, bad option, bad superblock on smb://10.8.0.10/sw-deliveryed/..."
#do this :
#  sudo apt-get install smbfs
#  sudo apt-get install nfs-common

# All the global variables in this script.
function init_global_variables() {
    PRE_TEXTDOMAINDIR=$TEXTDOMAINDIR
    PRE_TEXTDOMAIN=$TEXTDOMAIN
    my_cmd=
    mnt_target=~/Server/mnt
    extract_target=~/Version
    server_info=${MYSHELLDATADIR}/mnt/info
}

function print_help() {
    cat << Help
$(gettxt "mnt | Binzo's own command to mount remote filesystem.")
$(gettxt 'Usage:') mnt [PATH]
Help
}

# Parse and validate the arguments.
# return 0: ok
# return 1: invalid or print help.
function parse_and_check_args () {
    while [ $# -gt 0 ];do
        case "$1" in
        -h|--help|\?)
            print_help
            return 1    # exit.
            ;;
        *)
            shift
            ;;
        esac
    done
}

# Internationalization and localization
# Set local language support. only for zh_CN.
# Reference directory: /usr/local/share/locale
function set_localization() {
    export TEXTDOMAINDIR="${MYSHELLDIR}/lang/locale"
    export TEXTDOMAIN="mnt"
}

function unset_localization() {
    if [ -z "$PRE_TEXTDOMAINDIR" ]; then
        unset TEXTDOMAINDIR
    else
        export TEXTDOMAINDIR="${PRE_TEXTDOMAINDIR}"
    fi
    if [ -z "$PRE_TEXTDOMAIN" ]; then
        unset TEXTDOMAIN
    else
        export TEXTDOMAIN="${PRE_TEXTDOMAIN}"
    fi
}

function main() {
    init_global_variables

    # Check arguments.
    parse_and_check_args "$@"
    case "$?" in
    1)
        return 1
        ;;
    *)
        ;;
    esac

    if [ ! -d ${mnt_target} ]; then
        # mkdirs if target directory does not exist.
        mkdir -p ${mnt_target}
    elif [ -n "$(ls ${mnt_target})" ]; then
        # unmount directory if it's not empty
        sudo umount ${mnt_target}
        chk_return
    fi

    local url="$1"
    local server=
    if [[ $1 == *10.8.0.22/* ]]; then
        server="10.8.0.22"
        my_cmd="$(grep ${server} ${server_info})${url#*${server}} ${mnt_target}"
    elif [[ $1 == *10.8.0.23* ]]; then
        server="10.8.0.23"
        my_cmd="$(grep ${server} ${server_info})${url#*${server}} ${mnt_target}"
    fi

    if [ -n "${my_cmd}" ]; then
        echoW ${my_cmd}
        ${my_cmd}
        chk_return
        cd ${mnt_target}
        if [ -f *.7z ]; then
            local file_7z="`ls *.7z`"
            read -p "${file_7z} is detected, extract it to ${extract_target}(y/n)? " ANSWER
            if [[ ${ANSWER} == y || ${ANSWER} == Y ]]; then
                extract_target="${extract_target}/${file_7z}"
                if [ ! -d "${extract_target}" ]; then
                    mkdir -p ${extract_target}
                else
                    echo "Directory ${file_7z} exists already, you have to extract manually."
                    return 1
                fi
                7z e ${file_7z} -o${extract_target}
                cd ${extract_target}
            fi
        fi
    fi
}

set_localization
main "$@"
unset_localization
