#!/bin/bash

######## Script Information. BGN ########
# Author: liubingzhao.
# Date: 2017-01-03
######## Script Information. END ########

TARGET_DIR=
TARGET_PROJ=
TARGET_SH=~/Projects/task.sh
PROJECTS_ROOT=~/Projects
COMPILE_PRODUCT=

function input_project_dir {
    while [ true ]; do
        read -p "输入要创建的文件夹名称：" TARGET_DIR
        if [ -z "${TARGET_DIR}" ]; then
            echo "不能为空！"
        else
            if [ -d "${PROJECTS_ROOT}/${TARGET_DIR}" ]; then
                echo "此目录已经存在，请重新输入！"
            else
                break
            fi
        fi
    done
}

function project_dir() {
    local proj_dir="${PROJECTS_ROOT}/$1"
    if [ -z "$1" ]; then
        echo "No project dir specified!"
        input_project_dir
    elif [ -d "${proj_dir}" ]; then
        for item in /*; do
            # dir is not empty.
            ls -F ${PROJECTS_ROOT}
            echo "${1} is not empty."
            input_project_dir
        done
    else
        TARGET_DIR=$1
    fi
    export MY_PROJ_DIR=${TARGET_DIR}
    echo "export MY_PROJ_DIR=${TARGET_DIR}"
}


function input_project_name() {
    while [ true ]; do
        read -p "输入项目名称：" TARGET_PROJ
        if [ -z "${TARGET_PROJ}" ]; then
            echo "不能为空！"
        else
            break
        fi
    done
}

function product_name() {
    if [ -z "$1" ]; then
        read -p "输入要编译的产品名称，若与项目同名，请直接按回车：" COMPILE_PRODUCT
        if [ -z "${COMPILE_PRODUCT}" ]; then
            COMPILE_PRODUCT=${TARGET_PROJ}
        fi
    else
        COMPILE_PRODUCT=$1
    fi
}

function project_name() {
    if [ -z "$1" ]; then
        input_project_name
    else
        TARGET_PROJ=$1
    fi
    export MY_GN_PROJ=${TARGET_PROJ}
    echo "export MY_GN_PROJ=${TARGET_PROJ}"
}

# $1: project directory name.
# $2: project name to sync.
# $3: product name to compile.
function main() {
    #project_dir "$1"
    #project_name "$2"
    #product_name "$3"
    local proj_dir=~/Projects/$1
    local project="$2"
    local product="$3"
    if [ -z "${1}" -o -z "${2}" ]; then
        echo "Usage: new-task proj_dir project product"
        return 1
    fi
    if [ ! -d ${proj_dir} ]; then
        mkdir ${proj_dir}
    fi
    if [ ${project} -a -z "${product}" ]; then
        read -p "let product=${project}?(y/n)" ANSWER
        if [[ ${ANSWER} == y || ${ANSWER} == Y ]]; then
            product=${project}
        else
            return 1
        fi
    fi
    local export_sh=${proj_dir}/export.sh
    if [ -f ${export_sh} ]; then
        cat ${export_sh}
        read -p "Do you want to replace it?(y/n)" ANSWER
        if [[ ${ANSWER} == n || ${ANSWER} == N ]]; then
            return 1
        fi
    fi
    echo "export MY_GN_PROJDIR=${proj_dir}" > ${export_sh}
    echo "export MY_GN_PROJ=${project}" >> ${export_sh}
    echo "export MY_GN_PROD=${product}" >> ${export_sh}
    chmod +x ${export_sh}

    if [ ! -f ${TARGET_SH} ]; then
        echo '#!/bin/bash' >> ${TARGET_SH}
        echo 'LOG_FILE=~/mytasklog' >> ${TARGET_SH}
    fi
    echo >> ${TARGET_SH}
    echo '# ------------Task----------START' >> ${TARGET_SH}
    echo 'echo ---new task---: $(date) >> ${LOG_FILE}' >> ${TARGET_SH}
    echo "cd ${PROJECTS_ROOT}" >> ${TARGET_SH}
    echo '# Want to remove directory? Write it below.' >> ${TARGET_SH}
    echo '#rm -rf dir' >> ${TARGET_SH}
    echo "cd ${proj_dir}" >> ${TARGET_SH}
    echo "source export.sh" >> ${TARGET_SH}
    local isNewDir=true
    for item in ${proj_dir}/*; do
        if [[ ${item} != */export.sh ]]; then
            isNewDir=false
            break
        fi
    done
    if [[ ${isNewDir} == true ]]; then
        echo 'echo repo sync: $(date) >> ${LOG_FILE}' >> ${TARGET_SH}
        echo "${PROJECTS_ROOT}/repo_repoinit_conf" >> ${TARGET_SH}
    fi
    echo 'cd L*' >> ${TARGET_SH}
    echo 'cd android*' >> ${TARGET_SH}
    if [[ ${isNewDir} == false ]]; then
        read -p 'fetch,clean?(y/n)' ANSWER
        if [[ ${ANSWER} == y || ${ANSWER} == Y ]]; then
            echo 'echo git clean: $(date) >> ${LOG_FILE}' >> ${TARGET_SH}
            echo "repo forall -pvc git clean -df > /dev/null" >> ${TARGET_SH}
            echo 'echo git checkout: $(date) >> ${LOG_FILE}' >> ${TARGET_SH}
            echo 'repo forall -pvc git checkout .' >> ${TARGET_SH}
            echo 'echo git fetch: $(date) >> ${LOG_FILE}' >> ${TARGET_SH}
            echo "repo forall -pvc git fetch > /dev/null" >> ${TARGET_SH}
        fi
    fi
    read -p 'Checkout to the newest tag?(y/n)' ANSWER
    if [[ ${ANSWER} == y || ${ANSWER} == Y ]]; then
        echo 'newest_tag=`git tag | grep ^${MY_GN_PROJ}- | tail -n1`' >> ${TARGET_SH}
        echo 'echo git branch: $(date) >> ${LOG_FILE}' >> ${TARGET_SH}
        echo 'repo forall -pvc git branch my-${newest_tag} ${newest_tag}' >> ${TARGET_SH}
        echo 'echo git checkout to branch: $(date) >> ${LOG_FILE}' >> ${TARGET_SH}
        echo 'repo forall -pvc git checkout my-${newest_tag} > /dev/null' >> ${TARGET_SH}
    fi
    read -p "Compile user version?(y/n)" ANSWER
    if [[ ${ANSWER} == y || ${ANSWER} == Y ]]; then
        echo "./TmakeGionee -v user ${product} -n" >> ${TARGET_SH}
    else
        echo "./TmakeGionee -t ${product} -n" >> ${TARGET_SH}
    fi
    echo '# ------------Task----------END' >> ${TARGET_SH}
    echo >> ${TARGET_SH}
    read -p "Shutdown computer finally?(y/n)" ANSWER
    sed -i '/^echo shutdown:*/d' ${TARGET_SH} # delete all lines contain 'echo shutdown:'
    sed -i '/^sudo shutdown*/d' ${TARGET_SH} # delete all lines contain 'sudo shutdown'
    if [[ ${ANSWER} == y || ${ANSWER} == Y ]]; then
        echo 'echo shutdown: $(date) >> ${LOG_FILE}' >> ${TARGET_SH}
        echo 'sudo shutdown -h now' >> ${TARGET_SH} # append this line to the end of file.
    fi
    chmod +x ${TARGET_SH}
    echo "${TARGET_SH} generated, please check and execute it, or source it."
    vim ${TARGET_SH}
}

main "$@"
