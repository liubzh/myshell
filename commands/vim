#!/bin/bash

# Relatives:
# data: $MYSHELLDIR/data/v_files
# completion: $MYSHELLDIR/bash_completion.d/v
my_data_file=$MYSHELLDIR/data/v_files

function print_help() {
    echoI "Help: v | Binzo's customized 'vim'"
    cat << Help
Usage:
    v <FILE>    要查看的文件路径
    v : <FILE>  个人实现的自动补全路径(常用文件路径)
                另见：bash_completion.d/
Help
}

# 解析参数并且进行有效性验证
# return    返回是否解析成功，若有非法参数返回0，OK返回1
function parse_and_check_args ()
{
    args="$*"
    flag=
    for arg in $args; do
        if [ "$arg" = "-h" -o "$arg" = "--help" ]; then
            print_help
            # 打印帮助信息直接返回
            return 0
        fi
    done

    if [[ $1 == \: ]]; then
        if [ -z "$2" ]; then
            echoE "没有指定路径！"
            return 0
        #elif [ ! -f $2 ]; then
        #    echoE "文件$2不存在！"
        #    return 0
        fi
        return 1
    fi

    # 对于grep搜索带有行号的结果，类似"values/strings.xml:4005:"
    # 直接添加行号参数
    first_arg=$1
    if [[ $first_arg == *\:* ]]; then
        mypath=`echo $first_arg|awk -F ":" '{print $1}'`
        myline=`echo $first_arg|awk -F ":" '{print $2}'`
    fi

    return 1
}

mypath=
myline=
first_arg=

parse_and_check_args $*
if [ "$?" = 0 ]; then
    return
fi

if [[ $1 == \: ]]; then
    # Search items indlude keyword.
    result=
    let count=0
    while read line; do
        if [[ $line == *$2* ]]; then
            result+="$line "
            let count=$count+1
        fi
    done < $my_data_file
    if [ $count -eq 0 ]; then
        # There's no result.
        echoE None.
    elif [ $count -eq 1 ]; then
        # There's only 1 result.
        vim $result
    elif [ $count -gt 1 ]; then
        # There're 2 or more results.
        select selection in $result; do
            vim $selection
            break;
        done
    fi
elif [ -n "$mypath" -a -n "$myline" ]; then
    vim $mypath +$myline
else
    vim $*
fi
